@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject IStorageAPI Storage

<DialogLayout>
    <ChildContent>
        <form>
            <div class="form-group">
                <label for="dataType">Value</label>
                <input class="form-control @(valid ? "is-valid" : "is-invalid")" @onchange="HandleChangeValue" value="@value" />
            </div>
        </form>
    </ChildContent>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="Confirm">Confirm</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </Footer>
</DialogLayout>

@code {
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public int ID { get; set; }

    private AttrData attr;
    private string value = "";
    private bool valid = false;

    protected async override Task OnInitializedAsync() {
        var attr = await Storage.GetAttribute(ID);
        this.attr = await AttrData.Instantiate(attr);
    }

    private void HandleChangeValue(ChangeEventArgs e) {
        if (e.Value is string strValue) {
            value = strValue;
            valid = attr.DataType.Validate(value);
        }
    }

    private async Task Cancel() {
        await BlazoredModal.Cancel();
    }

    private async Task Confirm() {
        if (!attr.DataType.Validate(value)) {
            return;
        }

        await BlazoredModal.Close(ModalResult.Ok(value));
    }
}