@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject IStorageAPI Storage

@if (availableRelations.Any()) {
    <EditForm model="@model" OnValidSubmit="@HandleSubmit">
        <DialogLayout>
            <ChildContent>
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label for="dataType">Relation</label>
                    <select class="form-control" @onchange="HandleChangeNewRelation">
                        @foreach (var relation in availableRelations) {
                            <option value="@relation.PropertyID">(@relation.PropertyID) @relation.Label</option>
                        }
                    </select>
                </div>

                <hr/>

                <div class="form-group">
                    <label>Cardinality</label>
                    <InputNumber
                        class="form-control"
                        type="number"
                        disabled="@model.Mutable"
                        @bind-Value="model.Cardinality"
                    />
                </div>

                <div class="form-group">
                    <label>Permission</label>
                    <select class="form-control" @onchange="HandleChangePermission">
                        <option>Any</option>
                        @foreach (var actor in actors) {
                            <option value="@actor.IndividualID">@actor.Label</option>
                        }
                    </select>
                </div>                

                <hr/>

                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="required" @bind="model.Required"/>
                    <label class="form-check-label" for="required">Required</label>
                </div>

                <div class="form-group">
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="mutable" @bind="model.Mutable"/>
                        <label class="form-check-label" for="mutable">Mutable</label>
                    </div>
                </div>

                <hr/>

                <div class="form-group">
                    <label>Conditions</label>
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" id="transient" @bind="transient"/>
                        <label class="form-check-label" for="transient">Transient</label>
                    </div>

                    @if (!transient) {
                        <ConditionsEditor Model="@model.Conditions" Values="@allProperties" />
                    }
                </div>
            </ChildContent>
            <Footer>
                <button type="submit" class="btn btn-primary">Confirm</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </Footer>
        </DialogLayout>
    </EditForm>
}
else {
    <DialogLayout>
        <ChildContent>
            No relations available
        </ChildContent>
        <Footer>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Close</button>
        </Footer>
    </DialogLayout>
}

@code {
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public IEnumerable<int> Relations { get; set; }

    private IEnumerable<IProperty> allProperties;
    private AddModelRelationData model = new AddModelRelationData();
    private IEnumerable<IRelation> availableRelations = Array.Empty<IRelation>();
    private IEnumerable<IIndividual> actors = Array.Empty<IIndividual>();

    private bool transient = true;

    protected async override Task OnInitializedAsync() {
        var allAttributes = await Storage.GetAttributes();
        var allRelations = await Storage.GetRelations();
        allProperties = allAttributes.Concat<IProperty>(allRelations);

        availableRelations = allRelations.Where(a => !Relations.Contains(a.PropertyID));
        model.Relation = availableRelations.FirstOrDefault();
        actors = await Storage.GetActors();
    }

    private void HandleChangeNewRelation(ChangeEventArgs e) {
        if (Int32.TryParse((string)e.Value, out var id)) {
            model.Relation = availableRelations.Where(a => a.PropertyID == id).Single();
        }
    }

    private void HandleChangePermission(ChangeEventArgs e) {
        if (Int32.TryParse((string)e.Value, out var id)) {
            model.Permission = id;
        }
        else {
            model.Permission = null;
        }
    }

    private async Task Cancel() {
        await BlazoredModal.Cancel();
    }

    private async Task HandleSubmit() {
        await BlazoredModal.Close(ModalResult.Ok(
            new PropertyAssignData {
                ID = model.Relation.PropertyID,
                Required = model.Required,
                Cardinality = model.Cardinality,
                Mutable = model.Mutable,
                Permission = model.Permission,
                Conditions = transient
                    ? null
                    : model.Conditions.Compile(),
            }
        ));
    }
}