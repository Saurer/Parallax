@inject EngineBase Engine
@inject CredentialsService CredentialsService

<EditForm Model="@model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>
    <DialogLayout>
        <ChildContent>
            <div class="form-group">
                <label for="name">Model name</label>
                <InputText class="form-control" @bind-Value="model.Name" />
            </div>

            <div class="form-group">
                <label for="name">Parent model</label>
                <input class="form-control" type="text" disabled value="@parentModel?.Value" />
            </div>

            <h4 class="mt-5">Attributes</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th style="width:1px"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var attr in model.Attributes) {
                        <tr>
                            <td>@attr.Name</td>
                            <td>@attr.DataType.Name</td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="() => HandleRemoveAttribute(attr)">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </td>
                        </tr>
                    }
                    @if (attributes.Any()) {
                        <tr>
                            <td colspan="2">
                                <select class="form-control" value="@newAttr.ID" @onchange="HandleChangeNewAttr">
                                    @foreach (var attr in attributes) {
                                        <option value="@attr.ID">@attr.Name</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary" @onclick="HandleAddAttribute">
                                    <span class="oi oi-plus"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </ChildContent>
        <Footer>
            <button class="btn btn-danger" type="submit">Confirm</button>
            <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
        </Footer>
    </DialogLayout>
</EditForm>

@code {
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get;set; }

    [Parameter]
    public int BaseEventID { get; set; }

    [Parameter]
    public int ParentModelID { get; set; }

    private ModelCreateData model = new ModelCreateData();
    private IEnumerable<AttrData> parentAttrs = Array.Empty<AttrData>();
    private IEnumerable<AttrData> attributes = Array.Empty<AttrData>();
    private IModel parentModel;
    private AttrData newAttr;

    protected override async Task OnInitializedAsync() {
        parentModel = await Engine.Storage.GetModel(ParentModelID);
        var attrs = await parentModel.GetAllAttributes();
        var result = new List<AttrData>();

        foreach (var attr in attrs) {
            var dt = await attr.GetDataType();
            var attrData = await AttrData.Instantiate(attr);
            result.Add(attrData);
        }
        parentAttrs = result;
        newAttr = attributes.FirstOrDefault();
        await FilterAttributes();
    }

    private async Task HandleAddAttribute() {
        if (model.HasAttribute(newAttr)) {
            return;
        }

        if (parentAttrs.Any(a => a.ID == newAttr.ID)) {
            return;
        }

        var attrData = attributes.Where(a => a.ID == newAttr.ID).Single();
        model.AddAttribute(attrData);
        await FilterAttributes();
    }

    public async Task HandleRemoveAttribute(AttrData value) {
        model.RemoveAttribute(value);
        await FilterAttributes();
    }

    private void HandleChangeNewAttr(ChangeEventArgs e) {
        if (Int32.TryParse((string)e.Value, out var id)) {
            newAttr = attributes.Where(a => a.ID == id).Single();
        }
    }

    private async Task HandleSubmit() {
        model.EventType = BaseEventID;
        model.Parent = ParentModelID;
        int modelID = await model.Execute(Engine, CredentialsService);
        await BlazoredModal.Close(ModalResult.Ok(modelID));
    }

    private async Task FilterAttributes() {
        var values = await Engine.Storage.GetAttributes();
        attributes = await Task.WhenAll(
            values.Where(a =>
                !model.HasAttribute(a.ID) &&
                !parentAttrs.Any(p => a.ID == p.ID)
            ).Select(a => AttrData.Instantiate(a))
        );
        newAttr = attributes.FirstOrDefault();
    }

    private void Cancel() {
        BlazoredModal.Close(ModalResult.Cancel());
    }
}