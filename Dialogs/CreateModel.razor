@inject IStorageAPI Storage
@inject TransactionsService Tx

<EditForm Model="@model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>
    <DialogLayout>
        <ChildContent>
            <div class="form-group">
                <label for="name">Model name</label>
                <InputText class="form-control" @bind-Value="model.Name" />
            </div>

            <div class="form-group">
                <label for="name">Parent model</label>
                <input class="form-control" type="text" disabled value="@parentModel?.Label" />
            </div>

            <h4 class="mt-5">Attributes</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th style="width:100%">Name</th>
                        <th>Cardinality</th>
                        <th>Required</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var attr in model.Attributes) {
                        <tr>
                            <td>@attr.Attribute.Label</td>
                            <td>@attr.Cardinality</td>
                            <td>@attr.Required</td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="() => HandleRemoveAttribute(attr)">
                                    <i class="icon feather-trash-2"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    @if (attributes.Any()) {
                        <tr>
                            <td>
                                <select class="form-control" value="@newAttrModel.Attribute.ID" @onchange="HandleChangeNewAttr">
                                    @foreach (var attr in attributes) {
                                        <option value="@attr.ID">@attr.Label</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <InputNumber class="form-control" @bind-Value="newAttrModel.Cardinality" />
                            </td>
                            <td>
                                <input type="checkbox" @bind="newAttrModel.Required" />
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary" @onclick="HandleAddAttribute">
                                    <i class="icon feather-plus"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </ChildContent>
        <Footer>
            <button class="btn btn-danger" type="submit">Confirm</button>
            <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
        </Footer>
    </DialogLayout>
</EditForm>

@code {
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get;set; }

    [Parameter]
    public int BaseEventID { get; set; }

    [Parameter]
    public int ParentModelID { get; set; }

    [Parameter]
    public string DefaultName { get; set; }

    private ModelCreateData model = new ModelCreateData();
    private IEnumerable<AttrData> parentAttrs = Array.Empty<AttrData>();
    private IEnumerable<AttrData> attributes = Array.Empty<AttrData>();
    private IModel parentModel;
    private AddModelAttributeData newAttrModel;

    protected override async Task OnInitializedAsync() {
        parentModel = await Storage.GetModel(ParentModelID);
        model.Name = DefaultName;
        var modelAttrs = await parentModel.Properties.GetAttributes();
        var attrs = await Task.WhenAll(modelAttrs.Select(attr => attr.GetProperty()));
        var result = new List<AttrData>();

        foreach (var attr in attrs) {
            var dt = await attr.GetDataType();
            var attrData = await AttrData.Instantiate(attr);
            result.Add(attrData);
        }
        parentAttrs = result;
        await FilterAttributes();
    }

    private async Task HandleAddAttribute() {
        if (!newAttrModel.Valid){
            return;
        }

        if (model.HasAttribute(newAttrModel.Attribute.ID)) {
            return;
        }

        if (parentAttrs.Any(a => a.ID == newAttrModel.Attribute.ID)) {
            return;
        }

        var attrData = attributes.Where(a => a.ID == newAttrModel.Attribute.ID).Single();
        model.AddAttribute(newAttrModel);
        await FilterAttributes();
    }

    public async Task HandleRemoveAttribute(AddModelAttributeData value) {
        model.RemoveAttribute(value.Attribute.ID);
        await FilterAttributes();
    }

    private void HandleChangeNewAttr(ChangeEventArgs e) {
        if (Int32.TryParse((string)e.Value, out var id)) {
            newAttrModel.Attribute = attributes.Where(a => a.ID == id).Single();
        }
    }

    private async Task HandleSubmit() {
        // Create model
        int modelID = await Tx.CreateModel(BaseEventID, ParentModelID, model.Name);

        // Attach attributes
        foreach (var attr in model.Attributes) {
            var eventID = await Tx.AssignProviderAttribute(modelID, attr.Attribute.ID);

            if (Const.DefaultRequired != attr.Required) {
                await Tx.AssignPropertyValueRequirement(eventID, attr.Attribute.ID, attr.Required);
            }

            if (Const.DefaultCardinality != attr.Cardinality) {
                await Tx.AssignPropertyValueCardinality(eventID, attr.Attribute.ID, attr.Cardinality);
            }
        }

        await BlazoredModal.Close(ModalResult.Ok(modelID));
    }

    private async Task FilterAttributes() {
        var values = await Storage.GetAttributes();
        attributes = await Task.WhenAll(
            values.Where(a =>
                !model.HasAttribute(a.PropertyID) &&
                !parentAttrs.Any(p => a.PropertyID == p.ID)
            ).Select(a => AttrData.Instantiate(a))
        );
        newAttrModel = new AddModelAttributeData {
            Attribute = attributes.FirstOrDefault()
        };
    }

    private void Cancel() {
        BlazoredModal.Close(ModalResult.Cancel());
    }
}