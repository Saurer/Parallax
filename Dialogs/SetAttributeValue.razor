@inject EngineBase Engine

<DialogLayout>
    <ChildContent>
        <form>
            <div class="form-group row">
                <label for="attr" class="col-sm-3 col-form-label">
                    <strong>Attribute</strong>
                </label>
                <div class="col-sm-9">
                    <input type="text" readonly class="form-control-plaintext" id="attr" value="@(attr?.Name)"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="dataType" class="col-sm-3 col-form-label">
                    <strong>Data type</strong>
                </label>
                <div class="col-sm-9">
                    <input type="text" readonly class="form-control-plaintext" id="dataType" value="@(attr?.DataType?.Name)"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="value" class="col-sm-3 col-form-label">
                    <strong>Value</strong>
                </label>
                <div class="col-sm-9">
                    @if (attr?.DataType.IsBoxed is true) {
                        <select class="form-control @(Valid ? "is-valid" : "is-invalid")" @bind="value">
                            @foreach (var value in attr?.Values) {
                                <option value="@value.EventID.ToString()">@value.Value</option>
                            }
                        </select>
                    }
                    else {
                        <input type="text" value="@value" @onchange="HandleChange" class="form-control @(Valid ? "is-valid" : "is-invalid")" id="value"/>
                    }
                </div>
            </div>
        </form>
    </ChildContent>
    <Footer>
        <button type="button" class="btn btn-link" @onclick="Clear">Clear value</button>
        <button type="button" class="btn btn-primary" @onclick="Confirm">Confirm</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </Footer>
</DialogLayout>

@code {
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public int AttrID { get; set; }

    [Parameter]
    public string Value { get; set; }

    private AttrData attr;
    private string value = "";
    private bool Valid {
        get {
            if (null == attr) {
                return false;
            }

            return attr.DataType.Validate(value);
        }
    }

    protected override async Task OnInitializedAsync() {
        var attr = await Engine.Storage.GetAttribute(AttrID);
        this.attr = await AttrData.Instantiate(attr);
        value = Value ?? "";
    }

    private void HandleChange(ChangeEventArgs e) {
        var newValue = (string)e.Value;
        value = newValue;
    }

    private async Task Confirm() {
        if (!Valid) {
            return;
        }

        await BlazoredModal.Close(ModalResult.Ok(value));
    }

    private async Task Clear() {
        await BlazoredModal.Close(ModalResult.Ok<string>(null));
    }

    private void Cancel() {
        BlazoredModal.Cancel();
    }
}