@inject EngineBase Engine

<DialogLayout>
    <ChildContent>
        <form>
            <div class="form-group row">
                <label for="attr" class="col-sm-3 col-form-label">
                    <strong>Attribute</strong>
                </label>
                <div class="col-sm-9">
                    <input type="text" readonly class="form-control-plaintext" id="attr" value="@(ModelAttr?.Attribute.Name)"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="dataType" class="col-sm-3 col-form-label">
                    <strong>Data type</strong>
                </label>
                <div class="col-sm-9">
                    <input type="text" readonly class="form-control-plaintext" id="dataType" value="@(ModelAttr?.Attribute.DataType.Name)"/>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-3 col-form-label">
                    <strong>Value</strong>
                </label>
                <div class="col-sm-9">
                    @foreach (var value in editorValues) {
                        <div class="row mt-2">
                            <div class="@(AllowsMultiple ? "col-sm-9" : "col-sm-12")">
                                @if (ModelAttr?.Attribute.DataType.IsBoxed is true) {
                                    <select class="form-control @(IsValid(value.Value) ? "is-valid" : "is-invalid")" disabled="@value.ReadOnly" @bind="value.Value">
                                        @foreach (var item in ModelAttr?.Attribute.Values) {
                                            <option value="@item.EventID.ToString()">@item.Value</option>
                                        }
                                    </select>
                                }
                                else {
                                    <input
                                        type="text"
                                        disabled="@value.ReadOnly"
                                        @bind-value="value.Value"
                                        class="form-control @(IsValid(value.Value) ? "is-valid" : "is-invalid")"
                                    />
                                }
                            </div>
                            @if (AllowsMultiple) {
                                <div class="col-sm-3">
                                    <button type="button" class="btn btn-danger" disabled="@(editorValues.Count() == 1 || value.ReadOnly)" @onclick="() => HandleRemoveValue(value)">
                                        <i class="icon feather-trash"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    @if (AllowsMultiple && !IsFull) {
                        <div>
                            <button type="button" class="btn btn-link" @onclick="() => HandleAddValue()">Add another value</button>
                        </div>
                    }
                </div>
            </div>
        </form>
    </ChildContent>
    <Footer>
        @if (Editable) {
            <button type="button" class="btn btn-link" @onclick="Clear">Clear value</button>
        }
        <button type="button" class="btn btn-primary" @onclick="Confirm">Confirm</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </Footer>
</DialogLayout>

@code {
    private class BoxedValue {
        public bool ReadOnly { get; set; } = false;
        public string Value { get; set; } = "";
    }

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public ModelAttrData ModelAttr { get; set; }

    [Parameter]
    public IEnumerable<string> Values { get; set; }

    [Parameter]
    public bool Editable { get; set; } = false;

    private List<BoxedValue> editorValues = new List<BoxedValue>();

    private bool ValidAll =>
        editorValues.All(value => ModelAttr?.Attribute.DataType.Validate(value.Value) ?? false);

    private bool AllowsMultiple =>
        ModelAttr?.Cardinality == 0 || ModelAttr?.Cardinality > 1;

    private bool IsFull =>
        ModelAttr?.Cardinality != 0 && editorValues.Count >= ModelAttr?.Cardinality;

    protected override void OnInitialized() {
        if (!Values.Any()) {
            editorValues = new List<BoxedValue>(){
                new BoxedValue()
            };
        }
        else {
            editorValues = Values.Select(v => new BoxedValue{ ReadOnly = !Editable, Value = v }).ToList();
        }
    }

    private void HandleAddValue() {
        if (IsFull) {
            return;
        }

        editorValues.Add(new BoxedValue{
            ReadOnly = false,
            Value = ""
        });
    }

    private void HandleRemoveValue(BoxedValue value) {
        editorValues.Remove(value);
    }

    private bool IsValid(string value) =>
        ModelAttr?.Attribute.DataType.Validate(value) ?? false;

    private async Task Confirm() {
        if (!ValidAll) {
            return;
        }

        var resultValues = editorValues.Where(v => !v.ReadOnly).Select(v => v.Value);

        if (!resultValues.Any()) {
            await BlazoredModal.Cancel();
        }

        await BlazoredModal.Close(ModalResult.Ok(resultValues));
    }

    private async Task Clear() {
        await BlazoredModal.Close(ModalResult.Ok(Array.Empty<string>()));
    }

    private async Task Cancel() {
        await BlazoredModal.Cancel();
    }
}