@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject IStorageAPI Storage

<DialogLayout>
    <ChildContent>
        <form>
            <div class="form-group row">
                <label for="attr" class="col-sm-3 col-form-label">
                    <strong>Relation</strong>
                </label>
                <div class="col-sm-9">
                    <input type="text" readonly class="form-control-plaintext" id="attr" value="@(ModelRelation?.Relation.Label)"/>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-3 col-form-label">
                    <strong>Value</strong>
                </label>
                <div class="col-sm-9">
                    <select class="form-control" @bind="editorValue">
                        @foreach (var item in candidateValues) {
                            <option value="@item.IndividualID.ToString()">(@item.IndividualID) @item.Label</option>
                        }
                    </select>
                </div>
            </div>
        </form>
    </ChildContent>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="Confirm">Confirm</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </Footer>
</DialogLayout>

@code {

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public AttachedRelationData ModelRelation { get; set; }

    [Parameter]
    public IBoxedValue Value { get; set; }

    private string editorValue = "";
    private IEnumerable<IIndividual> candidateValues = Array.Empty<IIndividual>();

    protected override async Task OnInitializedAsync() {
        candidateValues = await Storage.GetRelationValueCandidates();

        if (Value != null) {
            editorValue = Value.PlainValue;
        }
        else {
            editorValue = candidateValues.First().IndividualID.ToString();
        }
    }

    private async Task Confirm() {
        var shownValue = candidateValues.Where(c => c.IndividualID.ToString() == editorValue).SingleOrDefault();
        var resultValue = new BoxedValueData(editorValue, shownValue?.Label ?? editorValue);
        await BlazoredModal.Close(ModalResult.Ok(resultValue));
    }

    private async Task Clear() {
        await BlazoredModal.Close(ModalResult.Ok<IBoxedValue>(null));
    }

    private async Task Cancel() {
        await BlazoredModal.Cancel();
    }
}