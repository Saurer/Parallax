@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@page "/attributes/create"
@inject IStorageAPI Storage
@inject EngineService EngineService
@inject NavigationManager NavigationManager
@inject RoutingService Routing
@inject TransactionsService Tx

<Scaffold>
    <Title>Create attribute</Title>
    <ChildContent>
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator/>

            <div class="form-group">
                <label for="name">Label</label>
                <InputText class="form-control" @bind-Value="model.Label" />
            </div>

            <div class="form-group">
                <label for="dataType">Data type</label>
                <select class="form-control" @onchange="HandleDataTypeChange">
                    @foreach (var (dtID, dtName) in dataTypes) {
                        <option value="@dtID">@dtName</option>
                    }
                </select>
            </div>

            <hr/>
            <button type="submit" class="btn btn-primary">
                <i class="icon feather-plus mr-1"></i>
                <span>Confirm</span>
            </button>
        </EditForm>
    </ChildContent>
</Scaffold>

@code {
    private AttributeCreateData model = new AttributeCreateData();
    private IEnumerable<(int, string)> dataTypes = Array.Empty<(int, string)>();

    protected async override Task OnInitializedAsync() {
        var result = new List<(int, string)>();
        var values = EngineService.Types.GetAll();
        foreach (var dt in values) {
            var dtIndividual = await Storage.GetDataTypeIndividual(dt.Name);
            result.Add((
                dtIndividual.IndividualID,
                dt.Name
            ));
        }
        dataTypes = result;
        model.DataType = dataTypes.First().Item1;
    }

    private void HandleDataTypeChange(ChangeEventArgs e) {
        if (e.Value is string strValue && Int32.TryParse(strValue, out var intValue)) {
            model.DataType = intValue;
        }
    }

    private async Task HandleSubmit() {
        int attrID = await Tx.CreateAttribute(model.Label);
        await Tx.AssignAttributeDataType(attrID, model.DataType);
        NavigationManager.NavigateTo(Routing.Attributes());
    }
}