@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@page "/attributes"
@inject IStorageAPI Storage
@inject RoutingService Routing

<Scaffold>
    <Title>Attributes</Title>
    <TitleRight>
        <NavLink href="@Routing.AttributesCreate()" class="btn btn-light">
            <i class="icon feather-plus mr-1"></i>
            <span>Create</span>
        </NavLink>
    </TitleRight>
    <ChildContent>
        @foreach (var attr in attributes) {
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-1">
                            @attr.ID
                        </div>
                        <div class="col-sm-8">
                            <strong>
                                <NavLink href="@Routing.AttributesView(attr.ID)">@attr.Label</NavLink>
                            </strong>
                        </div>
                        <div class="col-sm-1">
                            <div>
                                @(attr.IsBoxed ? "Boxed" : "Basic")
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="text-muted">@attr.DataType.Name</div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </ChildContent>
</Scaffold>

@code {
    private IEnumerable<AttrData> attributes = Array.Empty<AttrData>();

    protected override async Task OnInitializedAsync() {
        var values = await Storage.GetAttributes();
        attributes = await Task.WhenAll(values.Select(a => AttrData.Instantiate(a)));
    }
}