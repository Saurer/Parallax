@page "/entities/{id:int}/create-individual"
@using Microsoft.AspNetCore.WebUtilities
@inject IStorageAPI Storage
@inject TransactionsService Tx
@inject RoutingService Routing
@inject NavigationManager NavigationManager
@inject PropertyProviderService PropertyProvider
@inject PropertyContainerService PropertyContainer

<Scaffold>
    <Title>Create action individual</Title>
    <ChildContent>
        <EditForm Model="@individual" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator/>

            <div class="form-group">
                <label for="name">Label</label>
                <InputText class="form-control" @bind-Value="individual.Label" />
            </div>

            <div class="form-group">
                <label>Entity</label>
                <input class="form-control" type="text" disabled value="@entity?.Label" />
            </div>

            <div class="form-group">
                <label>Model</label>
                <select class="form-control" @onchange="HandleChangeModel" value="@(individual?.ModelID.ToString())">
                    @foreach (var model in models) {
                        <option value="@model.ModelID.ToString()">@model.Label</option>
                    }
                </select>
            </div>

            <h4 class="mt-5">Properties</h4>
            @if (null != selectedModel) {
                <ContainerProperties
                    PropertyProvider="@selectedModel.PropertyProvider"
                    OnChange="@individual.SetProperties"
                />
            }

            <hr/>
            <button type="submit" class="btn btn-primary">
                <i class="icon feather-plus mr-1"></i>
                <span>Confirm</span>
            </button>
        </EditForm>
    </ChildContent>
</Scaffold>

@code {
    [Parameter]
    public int ID { get; set; }

    private IndividualCreateData individual;
    private ModelData selectedModel;
    private IEntity entity;
    private IEnumerable<IModel> models = Array.Empty<IModel>();

    protected override async Task OnInitializedAsync() {
        individual = new IndividualCreateData(ID);
        entity = await Storage.GetEntity(ID);
        models = await Storage.GetEntityModels(ID);

        var query = new Uri(NavigationManager.Uri).Query;
        if (QueryHelpers.ParseQuery(query).TryGetValue("model", out var strValue) && Int32.TryParse(strValue, out var intValue)) {
            await SetModel(intValue);
        }
        else {
            await SetModel(models.First().ModelID);
        }
    }

    private async Task HandleChangeModel(ChangeEventArgs e) {
        if (e.Value is string strValue && Int32.TryParse(strValue, out var intValue)) {
            await SetModel(intValue);
        }
    }

    private async Task SetModel(int modelID) {
        individual.ModelID = modelID;
        individual.ResetProperties();
        selectedModel = await PropertyProvider.GetModel(modelID);
    }

    private async Task HandleSubmit() {
        var eventID = await PropertyContainer.CreateIndividual(individual);
        NavigationManager.NavigateTo(Routing.EntitiesView(ID));
    }
}