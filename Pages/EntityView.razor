@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@page "/entities/{id:int}"
@inject IStorageAPI Storage
@inject NavigationManager NavigationManager
@inject DialogService Dialog
@inject RoutingService Routing
@inject EntityService Entity

@if (null != entity) {
    <Scaffold>
        <Title>(@entity.ID) @entity.Label</Title>
        <ChildContent>
            <div>
                <div class="float-right">
                    <NavLink class="btn btn-link" href="@Routing.ModelsCreate(entity.ID, StaticEvent.EntityModel, $"Model_{entity.Label}")">
                        <i class="icon feather-plus mr-1"></i>
                        <span>Create model</span>
                    </NavLink>
                </div>
                <h4>Models</h4>
            </div>
            @if (entity.Models.Any()) {
                <table class="table">
                    <thead>
                        <tr>
                            <th style="width:1px">ID</th>
                            <th>Label</th>
                            <th>Parent</th>
                            <th style="width:1px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var model in entity.Models) {
                            <tr>
                                <td>@model.ID</td>
                                <td>
                                    <NavLink href="@Routing.ModelsView(model.ID)">
                                        @model.Label
                                    </NavLink>
                                </td>
                                <td>@model.ParentLabel</td>
                                <td>
                                    <div class="btn-group">
                                        <NavLink href="@Routing.ModelsCreate(entity.ID, model.ID, $"Model_{entity.Label}")" class="btn btn-light" title="Derive model">
                                            <i class="icon feather-code"></i>
                                        </NavLink>
                                        <NavLink href="@Routing.EntitiesCreateIndividual(ID, model.ID)" class="btn btn-light" title="Create individual using this model">
                                            <i class="icon feather-plus"></i>
                                        </NavLink>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else {
                <div class="text-muted">No models defined</div>
            }

            <div class="mt-5">
                <div class="float-right">
                    <button class="btn btn-link" disabled="@(!entity.Models.Any())" @onclick="HandleCreateIndividual">
                        <i class="icon feather-plus mr-1"></i>
                        <span>Create individual</span>
                    </button>
                </div>
                <h4>Individuals</h4>
                <hr/>
            </div>
            @if (entity.Individuals.Any()) {
                <div class="card-columns">
                    @foreach (var individual in entity.Individuals) {
                        <IndividualCard Value="@individual" OnUpdate="@Redraw" />
                    }
                </div>
            }
            else {
                <div class="text-muted">No individuals defined</div>
            }
        </ChildContent>
    </Scaffold>
}

@code {
    [Parameter]
    public int ID { get; set; }

    private EntityData entity = null;

    protected override async Task OnInitializedAsync() {
        await Redraw();
    }

    private async Task Redraw() {
        entity = await Entity.GetEntity(ID);
    }

    private void HandleCreateIndividual() {
        NavigationManager.NavigateTo(Routing.EntitiesCreateIndividual(ID));
    }
}