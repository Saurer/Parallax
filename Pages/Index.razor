@page "/"
@inject DialogService Dialog
@inject EngineService EngineService
@inject BackupService BackupService
@inject IJSRuntime JSRuntime
@inject Parallax.Services.DialogService ModalService

<Scaffold>
    <Title>Event log</Title>
    <TitleRight>
        <Paginator CurrentPage="@currentPage" TotalPages="@totalPages" OnChange="@HandlePageChange" />
    </TitleRight>
    <ChildContent>
        <EventList Items="@events" @key="@Engine" />

        <hr/>

        <div class="card-deck">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Backup data</h5>
                    <p class="card-text">Save current graph state to file. You can restore your workload and continue your work any time later</p>
                    <button class="btn btn-warning btn-block" @onclick="HandleBackupData">
                        <i class="icon feather-download-cloud mr-1"></i>
                        <span>Backup now</span>
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Restore data</h5>
                    <p class="card-text">Load graph state from existing file. This will replay graph events in order of their appearance</p>
                    <button class="btn btn-primary btn-block" @onclick="HandleRestoreData">
                        <i class="icon feather-upload-cloud mr-1"></i>
                        <span>Load from file</span>
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Reset state</h5>
                    <p class="card-text">Reset current state to genesis table. This will erase all events that were invoked by the user</p>
                    <button class="btn btn-danger btn-block" @onclick="HandleReset">
                        <i class="icon feather-alert-triangle mr-1"></i>
                        <span>Reset graph</span>
                    </button>
                </div>
            </div>
        </div>


        <InputFile OnChange="@HandleFileChange" @ref="inputFile" Hidden />
    </ChildContent>
</Scaffold>

@code {
    private IEnumerable<IEvent> events { get; set; } = Array.Empty<IEvent>();
    private const int ITEMS_PER_PAGE = 15;
    private int currentPage = 1;
    private int totalPages = 1;
    private InputFile inputFile;

    private EngineBase Engine {
        get {
            return EngineService.Instance;
        }
    }

    protected override async Task OnInitializedAsync() {
        events = await LoadPage(currentPage);
    }

    private async Task<IEnumerable<IEvent>> LoadPage(int page) {
        int offset = (page - 1) * ITEMS_PER_PAGE;
        totalPages = (int)Math.Ceiling(Engine.Position / (double)ITEMS_PER_PAGE);
        return await Engine.Storage.GetEvents(offset, ITEMS_PER_PAGE);
    }

    private async Task HandlePageChange(int page) {
        currentPage = page;
        events = await LoadPage(page);
    }

    private async Task HandleReset() {
        var result = await Dialog.ResetGraph();
        if (result) {
            await EngineService.InitEngine();
            events = await LoadPage(currentPage);
        }
    }

    private async Task HandleBackupData() {
        var backupEvents = await Engine.Storage.GetEvents(0, Engine.Position);
        var result = await BackupService.Encode(backupEvents);
        await JSRuntime.InvokeVoidAsync("io.saveFile", result, "backup.xml", "application/xml");
    }

    private async Task HandleRestoreData() {
        await inputFile.OpenDialog();
    }

    private async Task HandleFileChange(IEnumerable<InputFile.FileInfo> files) {
        if (!files.Any()) {
            return;
        }

        await inputFile.Clear();

        try {
            var file = files.First();
            var payload = BackupService.DecodeFromBase64(file.Data);
            var result = await Dialog.Confirm($"Do you really want to restore graph from this file?\nBackup payload contains {payload.Events.Count()} event(s)");
            if (result) {
                await EngineService.InitEngine(payload.Events);
                await LoadPage(1);
            }
        }
        catch (Exception) {
            await Dialog.Error("Provided file is corrupted or contains invalid data");
        }
    }
}