@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@page "/models/{id:int}"
@inject TransactionsService Tx
@inject DialogService Dialog
@inject RoutingService Routing
@inject PropertyProviderService PropertyProvider

@if (null != model) {
    <Scaffold>
        <Title>(@model.ID) @model.Label</Title>
        <ChildContent>
            <h4>Parent</h4>
            <div>
                @if (StaticEvent.Event == model.Parent) {
                    <span>Root</span>
                }
                else {
                    <NavLink href="@Routing.ModelsView(model.Parent)">@model.ParentLabel</NavLink>
                }
            </div>

            <hr/>
            <h4>Event base</h4>
            <div>
                (@model.EventBase) @model.EventBaseName
            </div>
            <hr/>

            <h4>Properties</h4>
            <ProviderProperties
                PropertyProvider="@model.PropertyProvider"
                OnChange="@Redraw"
            />
        </ChildContent>
    </Scaffold>
}

@code {
    [Parameter]
    public int ID { get; set; }

    private ModelData model = null;

    protected override async Task OnInitializedAsync() {
        await Redraw();
    }

    protected override async Task OnParametersSetAsync() {
        await Redraw();
    }

    private async Task Redraw() {
        this.model = await PropertyProvider.GetModel(ID);
    }
}