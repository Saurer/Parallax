@page "/models/{id:int}"
@inject IStorageAPI Storage
@inject TransactionsService Tx
@inject DialogService Dialog
@inject RoutingService Routing

@if (null != model) {
    <Scaffold>
        <Title>(@model.ID) @model.Name</Title>
        <ChildContent>
            <h4>Parent</h4>
            <div>
                @if (StaticEvent.Event == model.Parent) {
                    <span>Root</span>
                }
                else {
                    <NavLink href="@Routing.ModelsView(model.Parent)">@model.ParentName</NavLink>
                }
            </div>

            <hr/>
            <h4>Event base</h4>
            <div>
                (@model.EventBase) @model.EventBaseName
            </div>
            <hr/>

            @if (model.Attributes.Any()) {
                <h4>Attributes</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Required</th>
                            <th>Cardinality</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attr in model.Attributes) {
                            <tr>
                                <td>@attr.Attribute.ID</td>
                                <td>@attr.Attribute.Name</td>
                                <td>@attr.Attribute.DataType.Name</td>
                                <td>@attr.Required</td>
                                <td>@attr.Cardinality</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if (model.Relations.Any()) {
                <h4>Relations</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Required</th>
                            <th>Cardinality</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var relation in model.Relations) {
                            <tr>
                                <td>@relation.Relation.ID</td>
                                <td>@relation.Relation.Value</td>
                                <td>@relation.Required</td>
                                <td>@relation.Cardinality</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <hr/>
            <div>
                <button class="btn btn-primary" @onclick="HandleAddAttribute">
                    <i class="icon feather-plus mr-1"></i>
                    <span>Add attribute</span>
                </button>

                <button class="btn btn-primary" @onclick="HandleAddRelation">
                    <i class="icon feather-plus mr-1"></i>
                    <span>Add relation</span>
                </button>
            </div>
        </ChildContent>
    </Scaffold>
}

@code {
    [Parameter]
    public int ID { get; set; }

    private ModelData model = null;

    protected override async Task OnInitializedAsync() {
        await Redraw();
    }

    protected override async Task OnParametersSetAsync() {
        await Redraw();
    }

    private async Task Redraw() {
        var model = await Storage.GetModel(ID);
        this.model = await ModelData.Instantiate(model);
    }

    private async Task HandleAddAttribute() {
        var attributeIDs = model.Attributes.Select(l => l.Attribute.ID);
        var result = await Dialog.AddModelAttribute(attributeIDs);

        if (null != result) {
            var eventID = await Tx.AssignModelAttribute(ID, result.ID);

            if ((Const.DefaultRequired == 1) != result.Required) {
                await Tx.AssignPropertyValueRequirement(eventID, result.ID, result.Required);
            }

            if (Const.DefaultCardinality != result.Cardinality) {
                await Tx.AssignPropertyValueCardinality(eventID, result.ID, result.Cardinality);
            }

            await Redraw();
        }
    }

    private async Task HandleAddRelation() {
        var relationIDs = model.Relations.Select(l => l.Relation.ID);
        var result = await Dialog.AddModelRelation(relationIDs);

        if (null != result) {
            var eventID = await Tx.AssignModelRelation(ID, result.ID);

            if ((Const.DefaultRequired == 1) != result.Required) {
                await Tx.AssignPropertyValueRequirement(eventID, result.ID, result.Required);
            }

            if (Const.DefaultCardinality != result.Cardinality) {
                await Tx.AssignPropertyValueCardinality(eventID, result.ID, result.Cardinality);
            }

            await Redraw();
        }
    }
}