@page "/models/{id:int}"
@inject EngineBase Engine
@inject IModalService ModalService
@inject CredentialsService CredentialsService

@if (null != model) {
    <Scaffold>
        <Title>(@model.ID) @model.Name</Title>
        <ChildContent>
            <h4>Parent</h4>
            <div>
                @if (StaticEvent.Event == model.Parent) {
                    <span>Root</span>
                }
                else {
                    var parentLink = $"/models/{model.Parent}";
                    <NavLink href="@parentLink">@model.ParentName</NavLink>
                }
            </div>

            <hr/>
            <h4>Event base</h4>
            <div>
                (@model.EventBase) @model.EventBaseName
            </div>
            <hr/>

            @if (model.OwnAttributes.Any()) {
                <h4>Own Attributes</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Properties</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attr in model.OwnAttributes) {
                            <tr>
                                <td>@attr.ID</td>
                                <td>@attr.Name</td>
                                <td>@attr.DataType.Name</td>
                                <td>
                                    <dl>
                                        @foreach (var prop in attr.Properties) {
                                            <dt>@prop.PropertyID</dt>
                                            <dd>@prop.ValueID</dd>
                                        }
                                    </dl>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if (model.InheritedAttributes.Any()) {
                <h4>Inherited Attributes</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Properties</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attr in model.InheritedAttributes) {
                            <tr>
                                <td>@attr.ID</td>
                                <td>@attr.Name</td>
                                <td>@attr.DataType.Name</td>
                                <td>
                                    <dl>
                                        @foreach (var prop in attr.Properties) {
                                            <dt>@prop.PropertyID</dt>
                                            <dd>@prop.ValueID</dd>
                                        }
                                    </dl>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <hr/>
            <button class="btn btn-primary" @onclick="HandleAddAttribute">
                <i class="icon feather-plus mr-1"></i>
                <span>Add attribute</span>
            </button>
        </ChildContent>
    </Scaffold>
}

@code {
    [Parameter]
    public int ID { get; set; }

    private ModelData model = null;

    protected override async Task OnInitializedAsync() {
        await Redraw();
    }

    protected override async Task OnParametersSetAsync() {
        await Redraw();
    }

    private async Task Redraw() {
        var model = await Engine.Storage.GetModel(ID);
        this.model = await ModelData.Instantiate(model);
    }

    private async Task HandleAddAttribute() {
        var parameters = new ModalParameters();
        var attributeIDs = model.AllAttributes.Select(l => l.ID);
        parameters.Add("Attributes", attributeIDs);
        var modal = ModalService.Show<AddModelAttribute>("Add attribute", parameters);
        var result = await modal.Result;

        if (!result.Cancelled && result.Data is int intResult) {
            await CredentialsService.ProcessEvent(Engine, new FederatedEvent(
                ID,
                StaticEvent.Attribute,
                ID,
                intResult.ToString()
            ));
            await Redraw();
        }
    }
}