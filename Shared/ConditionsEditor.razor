@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

<div style="@(Decorate ? "border-left:dashed 1px #ccc;padding-left: 35px;margin-left:5px" : "")">
    <div class="form-group">
        <select class="form-control" @onchange="HandleChangeRule" value="@Model.Rule">
            <option value="@ConditionType.Conjunction">Conjunction clause (AND)</option>
            <option value="@ConditionType.Disjunction">Disjunction clause (OR)</option>
            <option value="@ConditionType.Equality">Equality</option>
            <option value="@ConditionType.Inequality">Inequality</option>
        </select>
    </div>
    @if (Model.IsCollection) {
        @foreach (var item in Model.Items) {
            <ConditionsEditor Decorate Model="@item" Values="@Values" />

            <button class="btn btn-link mt-2" @onclick="() => HandleRemoveArm(item)" style="margin-left:40px">
                <i class="icon feather-trash text-danger"></i>
                <span class="text-danger">Remove rule</span>
            </button>

            <hr />
        }
        <div>
            <button class="btn btn-link" type="button" @onclick="HandleAddArm">
                <i class="icon feather-plus mr-1"></i>
                <span>Add condition rule</span>
            </button>
        </div>
    }
    else {
        <div class="row">
            <div class="col-sm">
                <select class="form-control" @onchange="HandleChangeAttr" value="@(attr?.ID)">
                    @foreach (var attr in Values) {
                        <option value="@attr.PropertyID">@attr.Label</option>
                    }
                </select>
            </div>

            <div class="col-sm">
                @if (null != attr) {
                    if (attr.DataType.IsBoxed) {
                        <select class="form-control" @bind="Model.Value">
                            <option value="">&lt;None&gt;</option>
                            @foreach (var item in attr.Values) {
                                <option value="@item.EventID.ToString()">@item.Value</option>
                            }
                        </select>
                    }
                    else {
                        <input
                            class="form-control"
                            type="text"
                            @bind-value="Model.Value"
                            placeholder="Value..."
                        />
                    }
               }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public bool Decorate { get; set; } = false;

    [Parameter]
    public IEnumerable<IAttr> Values { get; set; }

    [Parameter]
    public ConditionData Model { get; set; } = new ConditionData();

    private AttrData attr = null;

    protected override async Task OnInitializedAsync() {
        await SetAttr(Model.Property);
    }

    private async Task HandleChangeRule(ChangeEventArgs e) {
        if (Enum.TryParse<ConditionType>((string)e.Value, out var rule)) {
            Model.Rule = rule;
            await SetAttr(Values.First().PropertyID);
        }
    }

    private async Task HandleChangeAttr(ChangeEventArgs e) {
        attr = null;
        Model.Value = null;

        if (Int32.TryParse((string)e.Value, out var id)) {
            await SetAttr(id);
        }
    }

    private async Task SetAttr(int attrID) {
        var attrProto = Values.Where(a => a.PropertyID == attrID).SingleOrDefault();
        if (attrProto != null) {
            Model.Property = attrID;
            attr = await AttrData.Instantiate(attrProto);
        }
    }

    private void HandleAddArm() {
        Model.Items.Add(new ConditionData{
            Rule = ConditionType.Equality,
            Property = Values.First().PropertyID
        });
    }

    private void HandleRemoveArm(ConditionData value) {
        Model.Items.Remove(value);
    }
}