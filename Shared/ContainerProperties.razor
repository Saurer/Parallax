@inject IStorageAPI Storage
@inject TransactionsService Tx
@inject DialogService Dialog
@inject RoutingService Routing
@inject PropertyProviderService PropertyProviderService
@inject CredentialsService Credentials

@foreach (var keyValue in PropertyProvider.Attributes.OrderBy(kv => kv.Value.AttachmentID)) {
    var attr = keyValue.Value;

    if (!IsAvailable(attr.Attribute.ID)) {
        continue;
    }

    <ContainerProperty
        Label="@attr.Attribute.Label"
        Type="@(CreateMode ? attr.Attribute.DataType.Name : null)"
        Cardinality="@(CreateMode ? (int?)attr.Cardinality : null)"
        Required="@attr.Required"
        IsAssignable="@IsFull(attr)"
        IsProtected="@IsProtected(attr)"
        OnAssign="@(() => HandleAssignAttribute(attr))"
    />

    @if (Properties.HasValueFor(attr.Attribute.ID)) {
        @foreach(var container in Properties.Attributes[attr.Attribute.ID]) {
            var actorID = container.Value.EventValue?.ActorEventID;
            <ContainerPropertyValue
                Value="@container.Value.ShownValue"
                ActorID="@actorID"
                ActorName="@container.ActorName"
                IsEditable="@(!container.ContainerID.HasValue)"
                OnEdit="@(() => HandleEditAttribute(attr, container))"
                OnRemove="@(() => Properties.RemoveAttributeValue(attr.Attribute.ID, container))"
            >
                <ContainerProperties
                    PropertyProvider="@attr.PropertyProvider"
                    PropertyContainer="@container"
                    OnChange="@HandleChange"
                />
            </ContainerPropertyValue>
        }
    }
}

@foreach (var keyValue in PropertyProvider.Relations.OrderBy(kv => kv.Value.AttachmentID)) {
    var relation = keyValue.Value;
    <ContainerProperty
        Label="@relation.Relation.Label"
        Type="Relation"
        TypeCssClass="badge-primary"
        Cardinality="@relation.Cardinality"
        Required="@relation.Required"
        IsAssignable="@IsFull(relation)"
        IsProtected="@IsProtected(relation)"
        OnAssign="@(() => HandleAssignRelation(relation))"
    />

    @if (Properties.HasValueFor(relation.Relation.PropertyID)) {
        @foreach(var container in Properties.Relations[relation.Relation.PropertyID]) {
            var actorID = container.Value.EventValue?.ActorEventID;
            <ContainerPropertyValue
                Value="@container.Value.ShownValue"
                ActorID="@actorID"
                ActorName="@container.ActorName"
                IsEditable="@(!container.ContainerID.HasValue)"
                OnEdit="@(() => HandleEditRelation(relation, container))"
                OnRemove="@(() => Properties.RemoveRelationValue(relation.Relation.PropertyID, container))"
            >
                <ContainerProperties
                    PropertyProvider="@relation.PropertyProvider"
                    PropertyContainer="@container"
                    OnChange="@HandleChange"
                />
            </ContainerPropertyValue>
        }
    }
}

@code {
    [Parameter]
    public PropertyProviderData PropertyProvider { get; set; }

    [Parameter]
    public PropertyContainerData PropertyContainer { get; set; }

    [Parameter]
    public EventCallback<PropertyContainerData> OnChange { get; set; }

    private PropertyContainerData Properties;
    private bool CreateMode => PropertyContainer == null;

    protected override void OnInitialized() {
        if (PropertyContainer == null) {
            Properties = new PropertyContainerData();
        }
        else {
            Properties = PropertyContainer;
        }
    }

    protected override void OnParametersSet() {
        if (PropertyContainer != null) {
            Properties = PropertyContainer;
        }
    }

    private bool IsFull(AttachedAttrData attr) {
        if (attr.Cardinality == 0) {
            return false;
        }

        if (null == Properties || !Properties.Attributes.ContainsKey(attr.Attribute.ID)) {
            return false;
        }

        return Properties.Attributes[attr.Attribute.ID].Count() >= attr.Cardinality;
    }

    private bool IsFull(AttachedRelationData relation) {
        if (relation.Cardinality == 0) {
            return false;
        }

        if (null == Properties || !Properties.Relations.ContainsKey(relation.Relation.PropertyID)) {
            return false;
        }

        return Properties.Relations[relation.Relation.PropertyID].Count() >= relation.Cardinality;
    }

    private bool IsProtected(AttachedAttrData attr) {
        if (attr.Permission.HasValue) {
            return Credentials.CurrentActor.IndividualID != attr.Permission;
        }
        else {
            return false;
        }
    }

    private bool IsProtected(AttachedRelationData relation) {
        if (relation.Permission.HasValue) {
            return Credentials.CurrentActor.IndividualID != relation.Permission;
        }
        else {
            return false;
        }
    }

    private async Task HandleAssignAttribute(AttachedAttrData attr) {
        var resultValue = await Dialog.SetAttributeValue(
            attr,
            null
        );

        if (null == resultValue) {
            return;
        }

        if (Properties.ContainerID.HasValue) {
            await Tx.AssignContainerProperty(Properties.ContainerID.Value, attr.Attribute.ID, resultValue.PlainValue);
        }
        else {
            Properties.AddAttributeValue(attr.Attribute.ID, resultValue);
        }

        await HandleChange();
    }

    private async Task HandleEditAttribute(AttachedAttrData attr, PropertyContainerData container) {
        var resultValue = await Dialog.SetAttributeValue(
            attr,
            container.Value
        );

        if (null == resultValue) {
            return;
        }

        container.SetValue(resultValue);
        await HandleChange();
    }

    private async Task HandleAssignRelation(AttachedRelationData relation) {
        var resultValue = await Dialog.SetRelationValue(
            relation,
            null
        );

        if (null == resultValue) {
            return;
        }

        if (Properties.ContainerID.HasValue) {
            await Tx.AssignContainerProperty(Properties.ContainerID.Value, relation.Relation.PropertyID, resultValue.PlainValue);
        }
        else {
            Properties.AddRelationValue(relation.Relation.PropertyID, resultValue);
        }

        await HandleChange();
    }

    private async Task HandleEditRelation(AttachedRelationData relation, PropertyContainerData container) {
        var resultValue = await Dialog.SetRelationValue(
            relation,
            container.Value
        );

        if (null == resultValue) {
            return;
        }

        container.SetValue(resultValue);
        await HandleChange();
    }

    private async Task HandleChange() {
        await OnChange.InvokeAsync(Properties);
    }


    private bool IsAvailable(int propertyID) {
        if (PropertyProvider.Attributes.TryGetValue(propertyID, out var attr)) {
            return TraverseConditions(attr.Conditions);
        }
        else if (PropertyProvider.Relations.TryGetValue(propertyID, out var relation)) {
            return TraverseConditions(relation.Conditions);
        }
        else {
            return false;
        }
    }

    private bool TraverseConditions(ConditionRule rule) {
        if (rule is ConditionRule.ConjunctionRule conjunctionRule) {
            foreach (var subRule in conjunctionRule.Values) {
                if (!TraverseConditions(subRule)) {
                    return false;
                }
            }

            return true;
        }
        else if (rule is ConditionRule.DisjunctionRule disjunctionRule) {
            foreach (var subRule in disjunctionRule.Values) {
                if (TraverseConditions(subRule)) {
                    return true;
                }
            }

            return false;
        }
        else if (rule is ConditionRule.PropertyEqualityRule equalityRule) {
            if (Properties.Attributes.TryGetValue(equalityRule.PropertyID, out var attr)) {
                return attr.Any(a => a.Value.PlainValue == equalityRule.Value);
            }

            if (Properties.Relations.TryGetValue(equalityRule.PropertyID, out var relation)) {
                return relation.Any(r => r.Value.PlainValue == equalityRule.Value);
            }

            return false;
        }
        else if (rule is ConditionRule.PropertyInequalityRule inequalityRule) {
            if (Properties.Attributes.TryGetValue(inequalityRule.PropertyID, out var attr)) {
                return attr.Any(a => a.Value.PlainValue != inequalityRule.Value);
            }

            if (Properties.Relations.TryGetValue(inequalityRule.PropertyID, out var relation)) {
                return relation.Any(r => r.Value.PlainValue != inequalityRule.Value);
            }

            return true;
        }
        else if (rule is ConditionRule.EventConditionRule) {
            return true;
        }
        else {
            throw new NotImplementedException();
        }
    }
}