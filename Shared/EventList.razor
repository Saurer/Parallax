@inject IStorageAPI Storage

<table class="table table-bordered table-hover table-sm">
    <thead>
        <tr>
            <th class="text-center">#</th>
            <th>BaseEventID</th>
            <th>ValueType</th>
            <th>Value</th>
            <th>Condition</th>
            <th>Actor</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in detailedEvents) {
            <tr>
                <td class="text-center">@item.ID</td>
                <td>(@item.BaseEvent.EventValue.ID) @item.BaseEvent.EventValue.Value</td>
                <td>(@item.ValueTypeEvent.EventValue.ID) @item.ValueTypeEvent.EventValue.Value</td>
                <td>@item.Value</td>
                <td>(@item.ConditionEvent.EventValue.ID) @item.ConditionEvent.EventValue.Value</td>
                <td>(@item.ActorEvent.EventValue.ID) @item.ActorEvent.EventValue.Value</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<IEvent> Items { get; set; }

    private IEnumerable<DetailedEvent> detailedEvents = Array.Empty<DetailedEvent>();

    private struct DetailedEvent {
        public int ID { get; set; }
        public IEvent BaseEvent { get; set; }
        public IEvent ValueTypeEvent { get; set; }
        public string Value { get; set; }
        public IEvent ConditionEvent { get; set; }
        public IEvent ActorEvent { get; set; }
        public DateTime Date { get; set; }
    }

    protected override async Task OnInitializedAsync() {
        await Refresh();
    }

    protected override async Task OnParametersSetAsync() {
        await Refresh();
    }

    private async Task<DetailedEvent> GetDetailedEvent(IEvent e) {
        return new DetailedEvent {
            ID = e.EventValue.ID,
            BaseEvent = await Storage.GetEvent(e.EventValue.BaseEventID),
            ValueTypeEvent = await Storage.GetEvent(e.EventValue.ValueID),
            Value = e.EventValue.Value,
            ConditionEvent = await Storage.GetEvent(e.EventValue.ConditionEventID),
            ActorEvent = await Storage.GetEvent(e.EventValue.ActorEventID),
            Date = e.Date
        };
    }

    public async Task Refresh() {
        var result = await Task.WhenAll(Items.Select(GetDetailedEvent));
        detailedEvents = result;
    }
}