@inject IStorageAPI Storage
@inject TransactionsService Tx
@inject PropertyContainerService PropertyContainer

<EditForm Model="@model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="name">Label</label>
        <InputText class="form-control" @bind-Value="model.Label" />
    </div>

    <h4 class="mt-5">Properties</h4>
    @if (null != dbModel) {
        <ContainerProperties
            PropertyProvider="@dbModel.PropertyProvider"
            OnChange="@model.SetProperties"
        />
    }

    <hr/>
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-plus mr-1"></span>
        <span>Confirm</span>
    </button>
</EditForm>

@code {
    [Parameter]
    public int BaseEvent { get; set; }

    [Parameter]
    public int ModelID { get; set; }

    [Parameter]
    public EventCallback<int> OnSubmit { get; set; }

    private IndividualCreateData model;
    private ModelData dbModel;

    protected async override Task OnInitializedAsync() {
        model = new IndividualCreateData(BaseEvent);
        var dbModel = await Storage.GetModel(ModelID);
        this.dbModel = await ModelData.Instantiate(dbModel);
        model.ModelID = ModelID;
    }

    private async Task HandleSubmit() {
        var individualID = await PropertyContainer.CreateIndividual(model);
        await OnSubmit.InvokeAsync(individualID);
    }
}