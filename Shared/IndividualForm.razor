@inject IStorageAPI Storage
@inject RoutingService Routing
@inject PropertyContainerService PropertyContainer

@if (null != individual) {
    <Scaffold>
        <Title>
            @individual?.Label
        </Title>
        <TitleRight>
            @if (badge != null) {
                <h3>
                    <span class="badge badge-success">@badge</span>
                </h3>
            }
        </TitleRight>
        <ChildContent>
            <h4>Model</h4>
            <div>
                <NavLink href="@(Routing.ModelsView(individual.Model.ModelID))">
                    (@individual.Model.ModelID) @individual.Model.Label
                </NavLink>
            </div>
            <hr/>

            @if (individual.Actor.HasValue) {
                <h4>Creator</h4>
                <div>
                    <NavLink href="@(Routing.IndividualsView(individual.Actor.Value))">
                        (@individual.Actor.Value) @individual.ActorLabel
                    </NavLink>
                </div>
                <hr/>
            }

            <h4>Properties</h4>
            <ContainerProperties
                PropertyProvider="@individual.PropertyProvider"
                PropertyContainer="@propertiesData"
                OnChange="@Refresh"
            />
        </ChildContent>
    </Scaffold>
}

@code {
    [Parameter]
    public int ID { get; set; }

    private IndividualData individual;
    private PropertyContainerData propertiesData;
    private string badge = null;

    protected override async Task OnInitializedAsync() {
        await Refresh();
    }

    protected override async Task OnParametersSetAsync() {
        await Refresh();
    }

    private async Task Refresh() {
        var actor = await Storage.GetIndividual(ID);
        individual = await IndividualData.Instantiate(actor);
        var parentEvent = await Storage.GetEvent(individual.Event.EventBase);
        badge = parentEvent.EventValue.Value;
        propertiesData = await PropertyContainer.GetPropertyContainer(individual.ID);
    }
}