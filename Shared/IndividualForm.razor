@inject IStorageAPI Storage
@inject RoutingService Routing

@if (null != individual) {
    <Scaffold>
        <Title>
            @individual?.Name
        </Title>
        <TitleRight>
            @if (badge != null) {
                <h3>
                    <span class="badge badge-success">@badge</span>
                </h3>
            }
        </TitleRight>
        <ChildContent>
            <h4>Model</h4>
            <div>
                <NavLink href="@(Routing.ModelsView(individual.Model.ID))">
                    (@individual.Model.ID) @individual.Model.Name
                </NavLink>
            </div>
            <hr/>

            @if (individual.Actor.HasValue) {
                <h4>Creator</h4>
                <div>
                    <NavLink href="@(Routing.IndividualsView(individual.Actor.Value))">
                        (@individual.Actor.Value) @individual.ActorName
                    </NavLink>
                </div>
                <hr/>
            }

            <h4>Properties</h4>
            <ModelForm
                IndividualID="@ID"
                Model="@model"
                Attributes="@attributes"
                Relations="@relations"
                OnUpdate="@Refresh"
            />
        </ChildContent>
    </Scaffold>
}

@code {
    [Parameter]
    public int ID { get; set; }

    private IndividualData individual;
    private ModelData model;
    private Dictionary<int, IEnumerable<string>> attributes;
    private Dictionary<int, IEnumerable<string>> relations;
    private string badge = null;

    protected override async Task OnInitializedAsync() {
        await Refresh();
    }

    protected override async Task OnParametersSetAsync() {
        await Refresh();
    }

    private async Task Refresh() {
        var actor = await Storage.GetIndividual(ID);
        individual = await IndividualData.Instantiate(actor);
        model = await ModelData.Instantiate(individual.Model.Value);
        attributes = individual.Attributes.ToDictionary(k => k.Key, v => v.Value.PlainValues);
        relations = individual.Relations.ToDictionary(k => k.Key, v => v.Value.PlainValues);
        var parentEvent = await Storage.GetEvent(individual.Event.BaseEventID);
        badge = parentEvent.Value;
    }
}