@inject DialogService Dialog
@inject EngineBase Engine

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @if (null != model) {
            @foreach (var attr in model.AllAttributes) {
                <tr>
                    <td>@attr.Name</td>
                    <td>@attr.DataType.Name</td>
                    <td>
                        <button type="button" class="btn btn-link p-0 border-bottom" @onclick="@(() => HandleAssignAttribute(attr.ID))">
                            @if (values.ContainsKey(attr.ID)) {
                                <span>@values[attr.ID]</span>
                            }
                            else {
                                <i class="icon feather-alert-triangle text-warning"></i>
                                <span class="text-muted">Unassigned</span>
                            }
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IModel Model { get; set; }

    [Parameter]
    public Dictionary<int, string> Values { get; set; }

    private ModelData model;
    private Dictionary<int, string> values = new Dictionary<int, string>();

    protected async override Task OnInitializedAsync() {
        model = await ModelData.Instantiate(Model);
        await UpdateValues();
    }

    protected async override Task OnParametersSetAsync() {
        model = await ModelData.Instantiate(Model);
        await UpdateValues();
    }

    private async Task UpdateValues() {
        var result = new Dictionary<int, string>();
        var attrs = model.AllAttributes;

        foreach (var kv in Values) {
            var attr = attrs.Where(a => a.ID == kv.Key).Single();
            if (attr.IsBoxed && Int32.TryParse(kv.Value, out var intValue)) {
                var valueIndividual = await Engine.Storage.GetEvent(intValue);
                result.Add(kv.Key, valueIndividual.Value);
            }
            else {
                result.Add(kv.Key, kv.Value);
            }
        }

        values = result;
    }

    private async Task HandleAssignAttribute(int attrID) {
        var result = await Dialog.SetAttributeValue(attrID, Values.ContainsKey(attrID) ? Values[attrID] : "");

        if (null == result) {
            Values.Remove(attrID);
        }
        else {
            Values[attrID] = result;
        }

        await UpdateValues();
    }
}