@inject DialogService Dialog
@inject IStorageAPI Storage
@inject TransactionsService Tx

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Cardinality</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @if (null != Model) {
            @foreach (var attr in Model.Attributes) {
                <tr>
                    <td>
                        <span>@attr.Attribute.Label</span>
                        @if (attr.Required) {
                            <span class="text-danger text-bold">(required)</span>
                        }
                    </td>
                    <td>@attr.Attribute.DataType.Name</td>
                    <td>@attr.Cardinality</td>
                    <td>
                        @if (IsFull(attr) && IndividualID.HasValue) {
                            if (attributes.ContainsKey(attr.Attribute.ID)) {
                                <span>@String.Join(',', attributes[attr.Attribute.ID].Select(l => l.ShownValue))</span>
                            }
                            else {
                                <i class="icon feather-alert-triangle text-warning"></i>
                                <span class="text-muted">Unassigned</span>
                            }
                        }
                        else {
                            <button type="button" class="btn btn-link p-0 border-bottom" @onclick="@(() => HandleAssignAttribute(attr))">
                                @if (attributes.ContainsKey(attr.Attribute.ID)) {
                                    <span>@String.Join(',', attributes[attr.Attribute.ID].Select(l => l.ShownValue))</span>
                                }
                                else {
                                    <i class="icon feather-alert-triangle text-warning"></i>
                                    <span class="text-muted">Unassigned</span>
                                }
                            </button>
                        }
                    </td>
                </tr>
            }

            @foreach (var relation in Model.Relations) {
                <tr>
                    <td>
                        <span>@relation.Relation.Label</span>
                        @if (relation.Required) {
                            <span class="text-danger text-bold">(required)</span>
                        }
                    </td>
                    <td>Relation</td>
                    <td>@relation.Cardinality</td>
                    <td>
                        @if (IsFull(relation) && IndividualID.HasValue) {
                            if (relations.ContainsKey(relation.Relation.PropertyID)) {
                                <span>@String.Join(',', relations[relation.Relation.PropertyID].Select(l => l.ShownValue))</span>
                            }
                            else {
                                <i class="icon feather-alert-triangle text-warning"></i>
                                <span class="text-muted">Unassigned</span>
                            }
                        }
                        else {
                            <button type="button" class="btn btn-link p-0 border-bottom" @onclick="@(() => HandleAssignRelation(relation))">
                                @if (relations.ContainsKey(relation.Relation.PropertyID)) {
                                    <span>@String.Join(',', relations[relation.Relation.PropertyID].Select(l => l.ShownValue))</span>
                                }
                                else {
                                    <i class="icon feather-alert-triangle text-warning"></i>
                                    <span class="text-muted">Unassigned</span>
                                }
                            </button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int? IndividualID { get; set; }

    [Parameter]
    public ModelData Model { get; set; }

    [Parameter]
    public Dictionary<int, IEnumerable<IBoxedValue>> Attributes { get; set; }

    [Parameter]
    public Dictionary<int, IEnumerable<IBoxedValue>> Relations { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private Dictionary<int, IEnumerable<IBoxedValue>> attributes = new Dictionary<int, IEnumerable<IBoxedValue>>();
    private Dictionary<int, IEnumerable<IBoxedValue>> relations = new Dictionary<int, IEnumerable<IBoxedValue>>();

    protected override void OnInitialized() {
        UpdateValues();
    }

    protected override void OnParametersSet() {
        UpdateValues();
    }

    private void UpdateValues() {
        var resultAttributes = new Dictionary<int, IEnumerable<IBoxedValue>>();
        var resultRelations = new Dictionary<int, IEnumerable<IBoxedValue>>();

        foreach (var kv in Attributes) {
            var modelAttr = Model.Attributes.Where(a => a.Attribute.ID == kv.Key).Single();

            if (!kv.Value.Any()) {
                continue;
            }

            if (!resultAttributes.ContainsKey(kv.Key)) {
                resultAttributes.Add(kv.Key, new List<IBoxedValue>());
            }

            var list = (List<IBoxedValue>)resultAttributes[kv.Key];
            foreach (var value in kv.Value) {
                list.Add(value);
            }
        }

        foreach (var kv in Relations) {
            var modelReation = Model.Relations.Where(r => r.Relation.PropertyID == kv.Key).Single();

            if (!kv.Value.Any()) {
                continue;
            }

            if (!resultRelations.ContainsKey(kv.Key)) {
                resultRelations.Add(kv.Key, new List<IBoxedValue>());
            }

            var list = (List<IBoxedValue>)resultRelations[kv.Key];
            foreach (var value in kv.Value) {
                list.Add(value);
            }
        }

        attributes = resultAttributes;
        relations = resultRelations;
    }

    private bool IsFull(ModelAttrData attr) {
        if (!attributes.ContainsKey(attr.Attribute.ID)) {
            return false;
        }

        if (attr.Cardinality == 0) {
            return false;
        }

        var items = attributes[attr.Attribute.ID];

        return items.Count() >= attr.Cardinality;
    }

    private bool IsFull(ModelRelationData relation) {
        if (!relations.ContainsKey(relation.Relation.PropertyID)) {
            return false;
        }

        if (relation.Cardinality == 0) {
            return false;
        }

        var items = relations[relation.Relation.PropertyID];

        return items.Count() >= relation.Cardinality;
    }

    private async Task HandleAssignAttribute(ModelAttrData attr) {
        var resultValues = await Dialog.SetAttributeValue(
            attr,
            Attributes.ContainsKey(attr.Attribute.ID) ? Attributes[attr.Attribute.ID] : Array.Empty<IBoxedValue>(),
            !IndividualID.HasValue
        );
            
        if (null == resultValues) {
            return;
        }

        if (IndividualID.HasValue) {
            foreach (var value in resultValues) {
                await Tx.AssignIndividualProperty(IndividualID.Value, attr.Attribute.ID, value.PlainValue);
            }
        }
        else {
            Attributes[attr.Attribute.ID] = resultValues;
            UpdateValues();
        }

        await OnUpdate.InvokeAsync(null);
    }

    private async Task HandleAssignRelation(ModelRelationData relation) {
        var resultValues = await Dialog.SetRelationValue(
            relation,
            Relations.ContainsKey(relation.Relation.PropertyID) ? Relations[relation.Relation.PropertyID] : Array.Empty<IBoxedValue>(),
            !IndividualID.HasValue
        );
            
        if (null == resultValues) {
            return;
        }

        if (IndividualID.HasValue) {
            foreach (var value in resultValues) {
                await Tx.AssignIndividualProperty(IndividualID.Value, relation.Relation.PropertyID, value.PlainValue);
            }
        }
        else {
            Relations[relation.Relation.PropertyID] = resultValues;
            UpdateValues();
        }

        await OnUpdate.InvokeAsync(null);
    }
}