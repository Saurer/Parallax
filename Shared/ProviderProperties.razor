@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject TransactionsService Tx
@inject DialogService Dialog
@inject PropertyProviderService PropertyProviderService
@inject IStorageAPI Storage

@foreach (var keyValue in properties.Attributes) {
    var attr = keyValue.Value;

    <ProviderProperty
        Type="@attr.Attribute.DataType.Name"
        Label="@attr.Attribute.Label"
        Cardinality="@attr.Cardinality"
        Required="@attr.Required"
        Permission="@attr.Permission"
        Conditions="@attr.Conditions"
        DefaultValue="@attr.DefaultValue"
        IsRemovable="@(!attr.AttachmentID.HasValue)"
        OnAddAttribute="@(() => HandleAddAttribute(attr.PropertyProvider))"
        OnAddRelation="@(() => HandleAddRelation(attr.PropertyProvider))"
        OnRemove="@(() => properties.RemoveAttribute(attr))"
    >
        <ProviderProperties
            CreateMode="@CreateMode"
            PropertyProvider="@attr.PropertyProvider"
            OnChange="@OnChange"
            RenderControls="false"
        />
    </ProviderProperty>
}

@foreach (var keyValue in properties.Relations) {
    var relation = keyValue.Value;

    <ProviderProperty
        Type="Relation"
        TypeCssClass="badge-primary"
        Label="@relation.Relation.Label"
        Cardinality="@relation.Cardinality"
        Required="@relation.Required"
        Permission="@relation.Permission"
        Conditions="@relation.Conditions"
        IsRemovable="@(!relation.AttachmentID.HasValue)"
        OnAddAttribute="@(() => HandleAddAttribute(relation.PropertyProvider))"
        OnAddRelation="@(() => HandleAddRelation(relation.PropertyProvider))"
        OnRemove="@(() => properties.RemoveRelation(relation))"
    >
        <ProviderProperties
            CreateMode="@CreateMode"
            PropertyProvider="@relation.PropertyProvider"
            OnChange="@HandleChange"
            RenderControls="false"
        />
    </ProviderProperty>
}

@if (RenderControls) {
    <hr/>
    <div>
        <button type="button" class="btn btn-secondary" @onclick="() => HandleAddAttribute(properties)">
            <i class="icon feather-check-circle mr-1"></i>
            <span>Add attribute</span>
        </button>
        <button type="button" class="btn btn-secondary" @onclick="() => HandleAddRelation(properties)">
            <i class="icon feather-copy mr-1"></i>
            <span>Add relation</span>
        </button>
    </div>
}

@code {
    [Parameter]
    public PropertyProviderData PropertyProvider { get; set; }

    [Parameter]
    public EventCallback<PropertyProviderData> OnChange { get; set; }

    [Parameter]
    public bool RenderControls { get; set; } = true;

    [Parameter]
    public bool CreateMode { get; set; }

    private PropertyProviderData properties;

    protected override void OnInitialized() {
        if (PropertyProvider == null) {
            properties = new PropertyProviderData();
        }
        else {
            properties = PropertyProvider;
        }
    }

    protected override void OnParametersSet() {
        if (PropertyProvider != null) {
            properties = PropertyProvider;
        }
    }

    private async Task HandleAddAttribute(PropertyProviderData provider) {
        var result = await Dialog.AddPropertyProviderAttribute(provider.Attributes.Keys);

        if (null == result) {
            return;
        }

        if (CreateMode) {
            var attr = await Storage.GetAttribute(result.ID);
            var attrData = await AttrData.Instantiate(attr);
            provider.AddAttribute(new AttachedAttrData(
                attrData,
                result.Required,
                result.Cardinality,
                result.Mutable,
                result.Permission,
                result.DefaultValue,
                result.Conditions
            ));
        }
        else {
            await PropertyProviderService.AddAttribute(provider.ProviderID.Value, result);
        }

        await HandleChange();
    }

    private async Task HandleAddRelation(PropertyProviderData provider) {
        var result = await Dialog.AddPropertyProviderRelation(provider.Relations.Keys);

        if (null == result) {
            return;
        }

        if (CreateMode) {
            var relation = await Storage.GetRelation(result.ID);
            provider.AddRelation(new AttachedRelationData(
                relation,
                result.Required,
                result.Cardinality,
                result.Mutable,
                result.Permission,
                result.Conditions
            ));
        }
        else {
            await PropertyProviderService.AddRelation(provider.ProviderID.Value, result);
        }

        await HandleChange();
    }

    private async Task HandleChange() {
        await OnChange.InvokeAsync(properties);
    }
}