@*
    Parallax
    Copyright (C) 2020  Frank Horrigan <https://github.com/saurer>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject IStorageAPI Storage
@inject RoutingService Routing
@inject ConditionsService ConditionsService

<div class="card mb-2 pb-0">
    <div class="card-body pb-2">
        <div class="row">
            <div class="col-sm-4">
                <h5>
                    <div class="badge float-left mr-2 @TypeCssClass">@Type</div>
                    <div>@Label</div>
                    <div>
                        @if (IsRemovable) {
                            <button type="button" class="btn btn-link mb-2 text-danger pl-0 pr-0" @onclick="OnRemove">
                                <i class="icon feather-trash mr-1"></i>
                                <span>Remove</span>
                            </button>
                        }
                    </div>
                </h5>
            </div>
            <div class="col-sm-4">
                <div class="row">
                    <div class="col-6 text-muted">Cardinality:</div>
                    <div class="col-6">
                        <strong>@Cardinality</strong>
                    </div>
                </div>

                @if (permissionActor != null) {
                    <div class="row">
                        <div class="col-6 text-muted">Permission:</div>
                        <div class="col-6">
                            <strong>
                                <NavLink href="@(Routing.IndividualsView(permissionActor.IndividualID))">
                                    @permissionActor.Label
                                </NavLink>
                            </strong>
                        </div>
                    </div>
                }

                <div class="row">
                    <div class="col-6 text-muted">Required:</div>
                    <div class="col-6">
                        @if (Required) {
                            <strong class="text-danger">@Required</strong>
                        }
                        else {
                            <div class="text-muted">@Required</div>
                        }
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-6 text-muted">Conditions:</div>
                    <div class="col-6">
                        @conditions
                    </div>
                </div>

                @if (DefaultValue != null) {
                    <div class="row">
                        <div class="col-6 text-muted">Initial value:</div>
                        <div class="col-6">
                            <strong>@DefaultValue.ShownValue</strong>
                        </div>
                    </div> 
                }
            </div>
            <div class="col-sm-4 text-right">
                <div>
                    <button type="button" class="btn btn-link mb-2" @onclick="OnAddAttribute">
                        <i class="icon feather-check-circle mr-1"></i>
                        <span>Add attribute</span>
                    </button>
                </div>
                <div>
                    <button type="button" class="btn btn-link mb-2" @onclick="OnAddRelation">
                        <i class="icon feather-copy mr-1"></i>
                        <span>Add relation</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (null != ChildContent) {
    <div style="border-left:dashed 1px #ccc;padding-left: 10px;">
        @ChildContent
    </div>
}

@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string TypeCssClass { get; set; } = "badge-success";

    [Parameter]
    public int Cardinality { get; set; }

    [Parameter]
    public int? Permission { get; set; }

    [Parameter]
    public ConditionRule Conditions { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public IBoxedValue DefaultValue { get; set; }

    [Parameter]
    public bool IsRemovable { get; set; }

    [Parameter]
    public EventCallback OnAddAttribute { get; set; }

    [Parameter]
    public EventCallback OnAddRelation { get; set; }

    [Parameter]
    public EventCallback OnRemove { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private IIndividual permissionActor;
    private string conditions;

    protected override async Task OnInitializedAsync() {
        if (Permission.HasValue && Permission != 0) {
            permissionActor = await Storage.GetActor(Permission.Value);
        }

        conditions = await ConditionsService.ToReadable(Conditions);
    }
}